<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitComboLib</name>
    </assembly>
    <members>
        <member name="T:UnitComboLib.UnitCombobox">
            <summary>
            This class implements a lookless combobox control with
            a unit drop-down selection that can be used to pre-select
            a list of useful combobox entries.
            </summary>
        </member>
        <member name="M:UnitComboLib.UnitCombobox.#cctor">
            <summary>
            Static class constructor to register look-less <seealso cref="T:UnitComboLib.UnitCombobox"/> class
            control with the dependency property system.
            </summary>
        </member>
        <member name="M:UnitComboLib.UnitCombobox.#ctor">
            <summary>
            Standard public class constructor.
            </summary>
        </member>
        <member name="T:UnitComboLib.Command.RelayCommand`1">
            <summary>
            A command whose sole purpose is to 
            relay its functionality to other
            objects by invoking delegates. The
            default return value for the CanExecute
            method is 'true'.
            
            Source: http://www.codeproject.com/Articles/31837/Creating-an-Internationalized-Wizard-in-WPF
            </summary>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Class constructor
            </summary>
            <param name="execute"></param>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Determine whether this pre-requisites to execute this command are given or not.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand`1.Execute(System.Object)">
            <summary>
            Execute the command method managed in this class.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:UnitComboLib.Command.RelayCommand`1.CanExecuteChanged">
            <summary>
            Eventhandler to re-evaluate whether this command can execute or not
            </summary>
        </member>
        <member name="T:UnitComboLib.Command.RelayCommand">
            <summary>
            A command whose sole purpose is to 
            relay its functionality to other
            objects by invoking delegates. The
            default return value for the CanExecute
            method is 'true'.
            </summary>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand.#ctor(System.Action)">
            <summary>
            Creates a new command that can always execute.
            </summary>
            <param name="execute">The execution logic.</param>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand.#ctor(UnitComboLib.Command.RelayCommand)">
            <summary>
            Copy constructor
            </summary>
            <param name="inputRC"></param>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new command.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand.CanExecute(System.Object)">
            <summary>
            Execute the attached CanExecute methode delegate (or always return true)
            to determine whether the command managed in this object can execute or not.
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:UnitComboLib.Command.RelayCommand.Execute(System.Object)">
            <summary>
            Return the attached delegate method.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="E:UnitComboLib.Command.RelayCommand.CanExecuteChanged">
            <summary>
            Eventhandler to re-evaluate whether this command can execute or not
            </summary>
        </member>
        <member name="F:UnitComboLib.ViewModel.UnitViewModel.MinFontSizeValue">
            <summary>
            Minimum value to be converted for both percentage and pixels
            </summary>
        </member>
        <member name="F:UnitComboLib.ViewModel.UnitViewModel.MaxFontSizeValue">
            <summary>
            Maximum value to be converted for both percentage and pixels
            </summary>
        </member>
        <member name="F:UnitComboLib.ViewModel.UnitViewModel.MinPercentageSizeValue">
            <summary>
            Minimum value to be converted for both percentage and pixels
            </summary>
        </member>
        <member name="F:UnitComboLib.ViewModel.UnitViewModel.MaxPercentageSizeValue">
            <summary>
            Maximum value to be converted for both percentage and pixels
            </summary>
        </member>
        <member name="M:UnitComboLib.ViewModel.UnitViewModel.#ctor(System.Collections.ObjectModel.ObservableCollection{UnitComboLib.ViewModel.ListItem},UnitComboLib.Unit.Converter,System.Int32,System.Double)">
            <summary>
            Class constructor to construct complete viewmodel object from listed parameters.
            </summary>
            <param name="list"></param>
            <param name="unitConverter"></param>
            <param name="defaultIndex"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:UnitComboLib.ViewModel.UnitViewModel.#ctor">
            <summary>
            Standard class constructor is hidden in favour of parameterized constructor.
            </summary>
        </member>
        <member name="M:UnitComboLib.ViewModel.UnitViewModel.SetSelectedItemExecuted(UnitComboLib.Unit.Itemkey)">
            <summary>
            Convert current double value from current unit to
            unit as indicated by <paramref name="unitKey"/> and
            set corresponding SelectedItem.
            </summary>
            <param name="unitKey">New unit to convert double value into and set SelectedItem to.</param>
            <returns></returns>
        </member>
        <member name="M:UnitComboLib.ViewModel.UnitViewModel.IsDoubleWithinRange(System.Double,UnitComboLib.Unit.Itemkey,System.String@)">
            <summary>
            Check whether the <paramref name="doubleValue"/> is within the expected
            range of <paramref name="unitToConvert"/> and output a corresponding
            error message via <paramref name="message"/> parameter if not.
            </summary>
            <param name="doubleValue"></param>
            <param name="unitToConvert"></param>
            <param name="message"></param>
            <returns>False if range is not acceptable, true otherwise</returns>
        </member>
        <member name="M:UnitComboLib.ViewModel.UnitViewModel.FontSizeErrorTip">
            <summary>
            Generate a standard font message to indicate the expected range value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnitComboLib.ViewModel.UnitViewModel.PercentSizeErrorTip">
            <summary>
            Generate a standard percent message to indicate the expected range value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnitComboLib.ViewModel.UnitViewModel.SetToolTip(System.String)">
            <summary>
            Set a tip like string to indicate the expected input format
            or input errors (if there are any input errors).
            </summary>
            <param name="strError"></param>
            <returns></returns>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.ScreenPoints">
            <summary>
            Currently selected value in screen points. This property is needed because the run-time system
            cannot work with percent values directly. Therefore, this property always ensures a correct
            font size no matter what the user selected in percent.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.UnitList">
            <summary>
            Get list of units, their default value lists, itemkeys etc.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.SelectedItem">
            <summary>
            Get/set currently selected unit key, converter, and default value list.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.Error">
            <summary>
            Source: http://joshsmithonwpf.wordpress.com/2008/11/14/using-a-viewmodel-to-provide-meaningful-validation-error-messages/
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.Item(System.String)">
            <summary>
            Standard property that is part of the <seealso cref="T:System.ComponentModel.IDataErrorInfo"/> interface.
            
            Evaluetes whether StringValue parameter represents a value within the expected range
            and sets a corresponding errormessage in the ValueTip property if not.
            
            Source: http://joshsmithonwpf.wordpress.com/2008/11/14/using-a-viewmodel-to-provide-meaningful-validation-error-messages/
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.ValueTip">
            <summary>
            Get a string that indicates the format of the
            expected input or a an error if the current input is not valid.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.StringValue">
            <summary>
            String representation of the double value that
            represents the unit scaled value in this object.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.Value">
            <summary>
            Get double value represented in unit as indicated by SelectedItem.Key.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.UnitViewModel.SetSelectedItemCommand">
            <summary>
            Get command to be executed when the user has selected a unit
            (eg. 'Km' is currently used but user selected 'm' to be used next)
            </summary>
        </member>
        <member name="T:UnitComboLib.ViewModel.ListItem">
            <summary>
            One item in the list of unit definition items
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.ListItem.DisplayNameLong">
            <summary>
            Display a long descriptive string of the unit stored in this object.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.ListItem.DisplayNameShort">
            <summary>
            Display a short string of the unit stored in this object.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.ListItem.DisplayNameLongWithShort">
            <summary>
            Display a combination of long and short string of the unit stored in this object.
            </summary>
        </member>
        <member name="P:UnitComboLib.ViewModel.ListItem.DefaultValues">
            <summary>
            Get a list of useful default values for the unit stored in this item.
            </summary>
        </member>
        <member name="T:UnitComboLib.Unit.Itemkey">
            <summary>
            Enumeration keys for each unit
            </summary>
        </member>
        <member name="T:UnitComboLib.Behaviour.ContextMenuBehaviour">
            <summary>
            This class can be used to populate a context-menu
            when a user clicks on a <seealso cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:UnitComboLib.Behaviour.ContextMenuBehaviour.GetMenuList(System.Windows.DependencyObject)">
            <summary>
            Implements the get portion of the <seealso cref="T:System.Windows.Controls.ContextMenu"/> dependency property.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:UnitComboLib.Behaviour.ContextMenuBehaviour.SetMenuList(System.Windows.DependencyObject,System.Windows.Controls.ContextMenu)">
            <summary>
            IMplements the set portion of the <seealso cref="T:System.Windows.Controls.ContextMenu"/> dependency property.
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:UnitComboLib.Behaviour.ContextMenuBehaviour.OnMenuListChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is fired when the <seealso cref="T:System.Windows.Controls.ContextMenu"/> dependency property is set or reset.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:UnitComboLib.Behaviour.ContextMenuBehaviour.element_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method is fired when the user clicks on the attached <seealso cref="T:System.Windows.FrameworkElement"/>.
            Its goal is to either open the corresponding <seealso cref="T:System.Windows.Controls.ContextMenu"/> via the <seealso cref="T:System.Windows.Controls.ContextMenu"/> dependency property
            or attempt to open the standard context menu of the attached <seealso cref="T:System.Windows.FrameworkElement"/> if the dependency property is not set.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:UnitComboLib.Unit.Screen.ScreenConverter.OneHundretPercentFont">
            <summary>
            A font size of 12 is equivalent to 100% (percent) display size.
            </summary>
        </member>
        <member name="F:UnitComboLib.Unit.Screen.ScreenConverter.OneHundretPercent">
            <summary>
            This is the standard value to scale against when using percent instead of fontsize.
            </summary>
        </member>
        <member name="M:UnitComboLib.Unit.Screen.ScreenConverter.Convert(UnitComboLib.Unit.Itemkey,System.Double,UnitComboLib.Unit.Itemkey)">
            <summary>
            Convert between different units of screen resolutions.
            </summary>
            <param name="inputUnit"></param>
            <param name="inputValue"></param>
            <param name="outputUnit"></param>
            <returns></returns>
        </member>
    </members>
</doc>
