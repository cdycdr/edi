<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    
	  xmlns:AvalonEdit="clr-namespace:ICSharpCode.AvalonEdit;assembly=ICSharpCode.AvalonEdit"
    xmlns:editing="clr-namespace:ICSharpCode.AvalonEdit.Editing;assembly=ICSharpCode.AvalonEdit"
    
    xmlns:pinlvw="clr-namespace:SimpleControls.MRU.View;assembly=SimpleControls"
    xmlns:hyperl="clr-namespace:SimpleControls.Hyperlink;assembly=SimpleControls"
    >
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/Themes;component/IconsLight.xaml" />
    <!-- ResourceDictionary Source="/Themes;component/Metro/Brushes.xaml" / -->
    <!-- ResourceDictionary Source="/Themes;component/Metro/StatusBar.xaml" / -->

    <ResourceDictionary Source="/Themes;component/MetroLight/ModernUI.Light.xaml" />

    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/Controls.TabControl.xaml" />
    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/Controls.Toolbar.xaml" />

    <!-- This type of combobox is used in the toolbar of the MainWindow -->
    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/Combobox.xaml" />

    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/GridSplitter.xaml" />
    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/Hyperlink.xaml" />
    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/Label.xaml" />
    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/MenuStyles.xaml" />
    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/Slider.xaml" />
    <ResourceDictionary Source="/Themes;component/MetroLight/Styles/Textblock.xaml" />

    <ResourceDictionary Source="/Themes;component/MetroLight/EdiAvalonEdit.xaml" />
    <ResourceDictionary Source="/Themes;component/MetroLight/UnitCombobox.xaml" />

    <ResourceDictionary Source="/MiniUML.View;component/SharedResources.xaml"/>
    
    <!-- This is required to style the dropdown button and frame of the control
    ResourceDictionary Source="/Themes;component/FileListView/Combobox.xaml" / -->

    <!-- MsgBox brush definitions -->
    <ResourceDictionary Source="/MsgBox;component/Themes/LightBrushes.xaml" />
    <ResourceDictionary Source="/MsgBox;component/Themes/LightIcons.xaml" />

    <!-- ResourceDictionary Source="/AvalonDock.Themes.Metro;component/Theme.xaml" / -->
  </ResourceDictionary.MergedDictionaries>

  <Style x:Key="FileHyperlinkDefault"
         TargetType="{x:Type hyperl:FileHyperlink}"
         BasedOn="{StaticResource {x:Type hyperl:FileHyperlink}}" />

  <!-- XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -->
  <Style TargetType="{x:Type pinlvw:PinableListViewItem}">
    <Setter Property="SnapsToDevicePixels" Value="true"/>
    <Setter Property="Padding" Value="1" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/><!-- This is required for the PathTrimmingTextBlock -->
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListViewItem">
          <Border Name="ListemBackgroundBorder"
                  Padding="3"
                  BorderBrush="Transparent"
                  BorderThickness="1"
                  CornerRadius="3"
                  SnapsToDevicePixels="true"
                  Background="Transparent">
            <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter TargetName="ListemBackgroundBorder" Property="Background" Value="{StaticResource ListViewItemMouseOverGradient}"/>
              <Setter TargetName="ListemBackgroundBorder" Property="BorderBrush" Value="{StaticResource ListViewItemMouseOverBorder}" />
              <Setter TargetName="ListemBackgroundBorder" Property="BorderThickness" Value="1" />
            </Trigger>
            <!-- Trigger Property="IsSelected" Value="true">
              <Setter TargetName="Border" Property="Background" Value="Black"/>
            </Trigger -->
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{StaticResource PinableListViewForegroundDisabled}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type pinlvw:PinableListView}">
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type pinlvw:PinableListView}">
          <Border Padding="0"
                  BorderThickness="0"
                  BorderBrush="Transparent"
                  Background="{StaticResource ToolViewBackground}"
                  Name="Bd"
                  SnapsToDevicePixels="True">
            <ScrollViewer Padding="0" Focusable="False">
              <ItemsPresenter SnapsToDevicePixels="True" />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
    <Setter Property="Background" Value="{StaticResource ContextMenuBackground}" />
    <Setter Property="BorderBrush" Value="{StaticResource ContextMenuBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
  </Style -->

  <!-- Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
    <Setter Property="Background" Value="{StaticResource ToolBarBackground}" />
  </Style>

  <Style TargetType="{x:Type ToolBarTray}" BasedOn="{StaticResource {x:Type ToolBarTray}}">
    <Setter Property="Background" Value="{StaticResource ToolBarTrayBackground}" />
  </Style>

  <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}">
    <Setter Property="Background" Value="{StaticResource MenuBackground}" />
  </Style>

  <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
    <Setter Property="Height" Value="1"/>
    <Setter Property="Margin" Value="0,4,0,4"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Separator}">
          <Border BorderBrush="{StaticResource SeperatorBorderBrush}" BorderThickness="1"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style -->

  <!-- Style x:Key="{x:Type StatusBarItem}" BasedOn="{StaticResource {x:Type StatusBarItem}}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Foreground" Value="Black" />
  </Style -->

  <!-- ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
    <Border Name="Border" >
      <Grid>
        <ContentPresenter Margin="6,3,6,3"
                          ContentSource="Header"
                          RecognizesAccessKey="True" />
        <Popup Name="Popup"
              Placement="Bottom"
              IsOpen="{TemplateBinding IsSubmenuOpen}"
              AllowsTransparency="True" 
              Focusable="False"
              PopupAnimation="Fade">
          <Border Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  Background="{StaticResource ContextMenuBackground}"
                  BorderBrush="{StaticResource SubMenuBorderBrush}"
                  BorderThickness="1" >
            <StackPanel IsItemsHost="True" 
                        KeyboardNavigation.DirectionalNavigation="Cycle" />
          </Border>
        </Popup>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSuspendingPopupAnimation" Value="true">
        <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
      </Trigger>
      <Trigger Property="IsHighlighted" Value="true">
        <Setter TargetName="Border" Property="Background" Value="{StaticResource HighlightMenuItemGradient}"/>
        <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
      </Trigger>
      <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
        <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,4,4"/>
        <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{StaticResource MenuItemForegroundDisabled}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="True">
        <Setter Property="Foreground" Value="{StaticResource MenuItemForegroundEnabled}"/>
      </Trigger>
      <Trigger SourceName="Popup" Property="Popup.IsOpen" Value="True">
        <Setter TargetName="Border" Property="Background" Value="#d0d7e2"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
    <Setter Property="Foreground" Value="{StaticResource SeperatorForeground}" />
  </Style -->

</ResourceDictionary>