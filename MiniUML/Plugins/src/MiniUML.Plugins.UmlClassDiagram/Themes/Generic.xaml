<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

  xmlns:d="clr-namespace:System.Windows.Data;assembly=PresentationFramework"
  xmlns:cm="clr-namespace:System.ComponentModel;assembly=WindowsBase"

  xmlns:viewutils="clr-namespace:MiniUML.View.Utilities;assembly=MiniUML.View"
  xmlns:controls="clr-namespace:MiniUML.View.Controls;assembly=MiniUML.View"
  xmlns:shapes="clr-namespace:MiniUML.Plugins.UmlClassDiagram.Controls.Shapes"

  xmlns:connect="clr-namespace:MiniUML.Plugins.UmlClassDiagram.Controls.Connect"

  xmlns:conv="clr-namespace:MiniUML.Plugins.UmlClassDiagram.Converter"
  xmlns:viewconv="clr-namespace:MiniUML.View.Converter;assembly=MiniUML.View"
  >
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/Brushes.xaml"  />

    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/Common/UmlBoundaryShape.xaml"  />
    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/Common/UmlPackageShape.xaml"  />
    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/Common/UmlCommentShape.xaml"  />

    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/UmlSquareShape.xaml"  />
    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/UmlDecisionShape.xaml"  />
    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/UmlNodeShape.xaml"  />

    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/UseCase/UmlUseCaseShape.xaml"  />
    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/UmlCanvasShape.xaml"  />

    <ResourceDictionary Source="/MiniUML.Plugins.UmlClassDiagram;component/Themes/UmlTextBox.xaml"  />
  </ResourceDictionary.MergedDictionaries>

  <Style TargetType="{x:Type connect:GenericUmlAssociation}"
         xmlns:views="clr-namespace:MiniUML.View.Views;assembly=MiniUML.View"
         >
    <Setter Property="Focusable" Value="True" />
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="views:CanvasView.CustomDrag" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type connect:GenericUmlAssociation}"
                          xmlns:utilities="clr-namespace:MiniUML.View.Utilities;assembly=MiniUML.View"
                          x:Name="_this"
                          >
          <ControlTemplate.Resources>
            <utilities:ArrowTemplateSelector x:Key="ArrowTemplateSelector"/>

            <viewconv:ShapeIdToControlConverter x:Key="ShapeIdToControlConverter"
                                                ReferenceControl="{Binding RelativeSource={RelativeSource AncestorType={x:Type connect:GenericUmlAssociation}}}" />
          </ControlTemplate.Resources>
            <Canvas>
            <Canvas.Resources>
              <!-- Set the style of the ThreePieceLine's Polyline.-->
              <Style TargetType="Polyline">
                <!-- Setter Property="Stroke" Value="{Binding ElementName='_this', Path='Stroke'}"/ -->
                <Setter Property="Stroke" Value="{Binding Path=Stroke, RelativeSource={RelativeSource AncestorType={x:Type connect:GenericUmlAssociation}}}"/>
              </Style>

              <!-- Set the style of arrow heads (whose style must be {DynamicResource StrokeStyle}). -->
              <Style x:Key="StrokeStyle" TargetType="Shape">
                <!-- Setter Property="Stroke" Value="{Binding ElementName='_this', Path='Stroke'}"/ -->
                <Setter Property="Stroke" Value="{Binding Path=Stroke, RelativeSource={RelativeSource AncestorType={x:Type connect:GenericUmlAssociation}}}"/>
              </Style>
            </Canvas.Resources>

            <connect:ThreePieceLine x:Name="tpl"
                                    FromX="{Binding Path='FirstNode.Attribute[Left].Value'}"
                                    FromY="{Binding Path='FirstNode.Attribute[Top].Value'}"
                                    FromOrientation="{Binding ElementName='FromAnchor', Path='SnapOrientation'}"
                                    ToX="{Binding Path='LastNode.Attribute[Left].Value'}"
                                    ToY="{Binding Path='LastNode.Attribute[Top].Value'}"
                                    ToOrientation="{Binding ElementName='ToAnchor', Path='SnapOrientation'}"
                                      
                                    Canvas.Top="0"
                                   />
            <!-- SnapTargetUpdate="snapTargetUpdate"
                                    
    -->

          <!-- Line Stroke="Red"
          StrokeThickness="2"
          X1="{Binding Path='FirstNode.Attribute[Left].Value'}" Y1="{Binding Path='FirstNode.Attribute[Top].Value'}"
          X2="{Binding Path='LastNode.Attribute[Left].Value'}"  Y2="{Binding Path='LastNode.Attribute[Top].Value'}">
          </Line -->

            <ContentControl ContentTemplateSelector="{StaticResource ArrowTemplateSelector}"
                            Canvas.Left="{Binding Path=FirstNode.Attribute[Left].Value}"
                            Canvas.Top="{Binding Path=FirstNode.Attribute[Top].Value}">
              <ContentControl.RenderTransform>
                <RotateTransform x:Name="roteFromAngleInDegrees" Angle="{Binding ElementName=tpl, Path=FromAngleInDegrees}"/>
              </ContentControl.RenderTransform>
              <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FromArrow"/>
            </ContentControl>

            <ContentControl ContentTemplateSelector="{StaticResource ArrowTemplateSelector}"
                            Canvas.Left="{Binding Path=LastNode.Attribute[Left].Value}"
                            Canvas.Top="{Binding Path=LastNode.Attribute[Top].Value}">
              <ContentControl.RenderTransform>
                <RotateTransform x:Name="ToAngleInDegrees" Angle="{Binding ElementName=tpl, Path=ToAngleInDegrees}"/>
              </ContentControl.RenderTransform>
              <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ToArrow"/>
            </ContentControl>

            <controls:AnchorPoint x:Name="FromAnchor"
                                  Canvas.Left="{Binding Path=FirstNode.Attribute[Left].Value}"
                                  Canvas.Top="{Binding Path=FirstNode.Attribute[Top].Value}"
                                  Left="{Binding Path=FirstNode.Attribute[Left].Value}"
                                  Top="{Binding Path=FirstNode.Attribute[Top].Value}"
                                  SnapTarget="{Binding Path=Attribute[From].Value, Converter={StaticResource ShapeIdToControlConverter}}"/>

            <controls:AnchorPoint x:Name="ToAnchor"
                                  Canvas.Left="{Binding Path=LastNode.Attribute[Left].Value}"
                                  Canvas.Top="{Binding Path=LastNode.Attribute[Top].Value}"
                                  Left="{Binding Path=LastNode.Attribute[Left].Value}"
                                  Top="{Binding Path=LastNode.Attribute[Top].Value}"
                                  SnapTarget="{Binding Path=Attribute[To].Value, Converter={StaticResource ShapeIdToControlConverter}}"/>

          </Canvas>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>
